// Code generated by go-bindata. DO NOT EDIT.
// sources:
// password_login.html (7.647kB)

package templates

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _password_loginHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x59\x4d\x8f\xdb\x36\x13\xbe\xeb\x57\xcc\xab\x04\xb1\x0d\x78\xa5\xfd\x78\x17\x08\x14\xc9\x45\x90\xec\xa5\x08\x9a\x00\xd9\x1c\x8a\x64\xd1\xd0\xd2\xd8\x62\x43\x93\x2a\x49\xd9\x6b\x2c\x0c\xf4\xd4\x6b\x7b\xe8\x25\xf7\xa2\xe8\xa5\xa7\xde\x92\xbf\x53\x24\xc8\xbf\x28\x24\xfa\x8b\x96\xe4\xfd\x48\x5b\x20\xa9\x75\x58\xd8\x9c\x99\x67\x66\x38\xcf\x0c\xe9\x55\xf8\xbf\x87\x8f\x1f\x9c\x7e\xfd\xe4\x04\x52\x3d\x62\x3d\xc7\x09\x53\x24\x49\xcf\x01\x00\x08\x95\x9e\x32\x34\x9f\x8b\x67\x20\xe4\xa8\x97\xd0\x31\x5c\x2c\x97\x8a\x27\x23\x49\x42\xf9\x30\x80\xe3\xec\x1c\xf6\xef\x2d\x65\x33\xc7\xb2\x04\x46\xfa\xc8\x36\x6c\x13\xaa\x32\x46\xa6\x01\x50\xce\x28\xc7\xbd\x3e\x13\xf1\xab\x7b\x96\xca\x84\x26\x3a\x0d\xe0\x18\x47\xf6\xba\xc6\x73\xbd\x47\x18\x1d\xf2\x00\x24\x1d\xa6\xda\x16\x8f\x51\x6a\x1a\x13\xb6\x50\xd1\x22\xbb\x57\x1f\xf6\x7e\x76\x0e\x07\xc5\x9f\xfd\xed\xf1\x53\x9e\xe5\xba\x6b\xaf\x15\x41\x10\x89\xa4\x69\x4b\xee\xce\xb1\x6b\x53\x3a\xac\xe4\xd4\x17\x32\x41\x19\xc0\x41\x76\x0e\x4a\x30\x9a\xc0\x2d\x42\x48\x73\x48\xfd\x5c\x6b\xc1\xaf\xe7\xbc\x4f\xe2\x57\x43\x29\x72\x9e\x04\x70\x6b\x30\x18\xd8\xd2\x11\xe5\x7b\xf3\xf0\xee\x5e\x3f\xba\xe2\x6f\xe8\xcf\x69\x13\xfa\x86\x4a\x4e\xd8\x17\xc9\x74\x4e\xa9\xf4\xa8\xf7\xfe\xf5\xdb\x0f\xaf\x7f\x08\x42\x3f\x3d\x9a\x2f\x96\xb9\xc4\x8c\x28\x15\xb9\x4c\x0c\x29\x77\x57\xa4\x0b\x13\x3a\xee\x59\x61\x84\x25\x91\x7a\xb9\x64\x41\xe8\x9b\xcf\xb6\x7c\x59\x14\x4e\x46\x18\xb9\xb9\x64\x6e\x2f\xf4\x17\xab\x6b\xd0\xbe\x85\xdd\xe8\x69\x84\x3a\x15\x49\x83\xb3\x92\x15\x73\x4f\x46\xd1\x2d\x58\x4d\xfa\x0c\x13\x18\x13\x96\x63\xe4\x3e\x79\xfc\xf4\xd4\x05\xff\xfa\x9e\x13\xa2\xc9\xd5\x92\x2c\x34\x5d\x90\x62\xa2\xa2\xe3\x9e\x63\x08\xe1\xe6\x0a\x65\x21\x76\x03\x70\x13\x1c\x89\xe2\xbb\x6b\x18\xec\x66\x44\xa9\x89\x90\xc9\x42\xf6\x4c\xa1\x3c\x38\x3c\xea\xba\xce\xec\x63\xf6\xaa\x3e\xd8\x39\x4f\xf5\x34\xc3\xc8\x55\x79\x7f\x44\xb5\xdb\x7b\xf7\xe3\x4f\x7f\xbe\xf9\x25\xf4\x8d\xb0\xe2\xea\x72\x5f\x12\x55\x26\xb8\x42\x50\x9a\xe8\x5c\x5d\xa1\x40\x46\xb1\x5a\xa0\x1b\x15\x67\xe1\xfe\x6a\x05\x5a\x68\xcf\x8b\xf4\xff\x65\x0c\x97\x51\x33\xf4\xcb\xb9\xeb\xac\xfa\xe7\xed\xef\xef\xdf\xfc\xda\xd4\x3f\x12\x39\x4e\x3e\xb7\xfe\x79\xf6\x2f\xb6\xcf\xd1\xb2\x7d\x24\x0e\x24\xaa\xf4\x1b\x2d\x5e\x21\x2f\xfa\xc4\x75\x66\x36\xca\xae\x51\xfe\xf1\x46\x39\xbe\x79\xa3\xbc\xfb\xe3\xb7\x0f\x3f\x7f\xbf\xe5\xa0\x11\xb9\xfe\xcc\x3a\xe5\xe1\xc9\xa3\x93\xd3\x93\x1b\x55\x69\x47\xc8\x86\xaa\xfe\x4d\x84\x54\xb1\xa4\x99\x5e\x29\x32\xd4\x90\xe0\x98\xc6\x08\x11\xb4\x26\xd8\x6f\x59\xa2\x5c\x32\x05\x11\x24\x22\xce\x47\xc8\xb5\xf7\x5d\x8e\x72\xfa\x14\x19\xc6\x5a\xc8\xfb\x8c\xb5\x5b\x0b\xdf\xcf\xcb\x30\x73\xc9\xce\x5a\x9d\x25\x44\x61\xfe\x7c\xff\xcc\x2b\xb7\x09\x22\x78\x79\xfb\x82\x89\x98\x68\x2a\xb8\x97\x4a\x1c\xcc\xbe\xc8\xa4\x18\xd3\x04\x65\xb4\xb8\x09\xdc\x91\x38\xc2\x51\x1f\x65\x74\x70\xc7\x04\x16\xdd\xbe\x30\x1f\x66\x2f\x6d\xe0\x83\x15\xb0\x85\x6a\x6b\x1d\x6e\x73\x5f\xf5\x60\x5d\x6d\x2f\xc9\xbd\x50\x59\xcb\x76\x4c\x24\x94\x17\x47\x88\x8c\xf5\xf3\xfd\x33\x4b\x58\x9e\x8a\x4b\xe1\xc1\xd9\xa6\xa5\xc8\xf5\x52\x7a\xb8\x92\x96\x98\x1e\x49\x92\x93\x31\x72\xfd\x88\x2a\x8d\x1c\x65\x7b\xd1\x08\x5d\x18\xe4\x3c\x2e\x92\x82\x36\x76\x36\xae\xe1\xe8\x65\x12\x0b\xb3\x87\x38\x20\x39\xd3\xed\x8e\x63\xc9\xe7\x45\x86\x08\x74\x4a\x95\x9d\x63\x7d\x71\xcd\x6e\x56\x40\xcc\x2c\x68\xc0\x29\x7b\xc8\x80\x18\xbd\x66\x9c\xe2\x0c\x84\x08\xbe\x7c\xfa\xf8\x2b\x2f\x23\x52\x61\xfb\xf2\xc0\x0a\x9b\x25\x62\xa7\x02\x69\xba\xf6\xf2\xd0\x8c\xde\x3a\x7f\x17\x08\xcb\x49\x71\x95\x6d\x5a\x28\xd7\x03\x95\x87\x39\x44\x86\x0b\x57\x4a\xcb\x2e\x98\x09\x72\x49\xe9\x96\xe7\x79\x2d\x4b\x61\xe1\x7e\x43\xc5\xd2\x19\xa0\x8e\xd3\x76\x2e\x59\x77\x83\x2e\xc5\x63\x2a\xd4\xad\xac\xc7\x12\x13\xe4\x9a\x12\xa6\x02\x70\x29\x8f\x59\x9e\xa0\x5b\xd5\x2b\x7e\x6f\xa1\x54\x41\x0d\x74\xf1\xb4\xee\xc7\x31\x66\xba\x15\x40\x8b\x64\x19\xa3\xa6\x1f\xfd\x6f\x95\xe0\xad\x2a\x58\x69\xf1\x40\x70\x8d\x5c\xef\x9d\x4e\x33\xac\xb5\xab\x98\xcd\xaa\x48\xc5\xcf\xbf\xc0\xf0\x4a\x69\x49\xf9\x90\x0e\xa6\xed\x62\x8b\x3b\xb6\xee\xac\x53\x31\xf5\x74\x8a\xbc\x2d\x21\xea\x35\xe4\x14\x0b\xae\x04\x43\x8f\x89\x61\x5b\x56\xed\xa1\x5a\xb7\x97\xb7\x2f\xa4\x67\xd6\x66\x01\xac\xbe\x9c\xe2\xb9\x5e\x9b\x73\xeb\x8f\x44\x9d\x4b\x0e\xb2\x9a\xec\xd6\x88\xa5\x57\xb0\xaa\xdd\xb9\x41\x5a\x5a\x4e\x1b\x24\x65\x3c\x76\x9b\x36\xe4\x0d\x75\x94\xdc\xa8\x82\xec\x02\xcf\x19\xeb\xc2\xe1\x36\x8c\x86\xec\xcb\x1d\x80\x98\xe8\x38\xad\x99\x7f\x5b\xc3\xa8\x07\x2b\x33\x4f\xa5\x98\x00\xd6\x3b\xbb\x66\x01\xea\x03\x9a\x4f\x82\x15\x21\x2e\x5e\xf0\xba\xdb\x7e\x41\x0d\x6b\x71\xe6\xbe\xe0\x35\x0c\x99\xad\xcd\x89\x59\x17\x06\x84\x29\x5c\x5b\x32\xe3\x66\x77\x86\x7c\x82\x67\xc8\x6e\xfc\xef\xc6\xff\x6e\xfc\x7f\x1a\xe3\x7f\x7d\x0a\x9b\x0b\xfd\x7f\x65\xe6\xee\x06\xe4\x27\x35\x20\x77\x33\x6f\x37\xf3\x36\x32\xff\x88\x99\x07\xe6\x8d\xdb\xfc\x7f\x4b\x4e\xe8\x9b\x77\x6d\x4e\xe8\x97\xef\x73\xff\x0a\x00\x00\xff\xff\xd6\x32\x4e\xb3\xdf\x1d\x00\x00")

func password_loginHtmlBytes() ([]byte, error) {
	return bindataRead(
		_password_loginHtml,
		"password_login.html",
	)
}

func password_loginHtml() (*asset, error) {
	bytes, err := password_loginHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "password_login.html", size: 7647, mode: os.FileMode(0644), modTime: time.Unix(1564675155, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xca, 0xf4, 0xca, 0x1c, 0x62, 0xa2, 0x95, 0xab, 0x9e, 0x98, 0x3f, 0x12, 0xbd, 0xd6, 0x5a, 0x94, 0x75, 0xe3, 0x21, 0x59, 0x7f, 0x59, 0x15, 0x6a, 0x65, 0xbe, 0x66, 0xe4, 0x3a, 0xae, 0xf0, 0xe9}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"password_login.html": password_loginHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"password_login.html": &bintree{password_loginHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
