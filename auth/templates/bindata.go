// Code generated by go-bindata. DO NOT EDIT.
// sources:
// password_login.html (10.444kB)

package templates

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _password_loginHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x5b\x6f\x1b\xc7\x15\x7e\xe7\xaf\x98\xae\x8c\x2c\x09\x90\x4b\x91\xb2\x8a\x78\xcb\x65\x61\xc4\x42\x8a\xc2\xad\x5d\x58\x79\x28\x1c\x23\x5e\xee\x1e\x6a\xa7\x1e\xce\x6c\x67\x67\x75\x89\x40\x40\xe9\x0d\xbd\xc4\x51\x03\x33\x6e\x9c\xa4\x2d\xdc\x3a\x81\x60\xa0\xd6\x43\xd1\xc6\x96\x25\xfb\xcf\x88\x17\x3d\xe5\x2f\x14\xb3\x4b\x52\xdc\x1b\x45\xdb\x41\x03\xdb\x5a\x01\xc2\x72\xe6\x9c\x33\xdf\xb9\x7c\x67\x66\x97\xac\x7d\xef\xc2\xa5\xb7\x96\x7f\x7e\x79\x09\x39\xa2\x45\xea\xb9\x5c\xcd\x01\xd3\xae\xe7\x10\x42\xa8\xe6\x89\x0d\x02\xe1\xbd\xbc\x1a\xcc\xde\x40\x9b\xe3\x8f\xc1\x90\x69\xdd\x58\xe1\xcc\xa7\xb6\x8e\xe6\x00\xe0\x07\x91\xd9\x26\xa3\xa2\xd4\x34\x5b\x98\x6c\xe8\x48\x1d\xfc\xe9\x51\xef\xf6\x23\xb5\x88\xd4\xee\x93\x07\x83\x83\xdd\xa3\xcf\x7f\x7b\xf4\xf8\x63\x35\xaa\xe2\x9a\xb6\x8d\xe9\x8a\x8e\x2a\xf3\xee\x7a\x74\xaa\x65\xf2\x15\x4c\x75\x34\x7f\x3c\xdc\xce\x8d\x6f\x9d\x4a\x0c\x5a\x28\x5e\x22\xd0\x14\x71\x6b\x93\x6a\x3c\x55\x4d\x47\xd5\x45\x77\x1d\x95\x82\xff\xe1\x6d\x12\x50\x83\x71\x1b\xb8\x8e\x28\xa3\x31\xc7\x1d\xc0\x2b\x8e\x5c\x36\xa1\x32\x8e\x57\xc9\x62\x84\x71\x1d\xcd\xd9\xb6\x9d\x8a\x4c\x6b\x10\x66\xdd\xc8\x40\x97\x04\x33\x0e\xdc\x18\x71\x25\xf8\x97\x10\xb4\xb1\xe7\x12\x73\x43\x47\x98\x12\x4c\xa1\x14\x2c\x93\x85\x52\x47\x73\xcd\x66\x33\xcd\xed\x12\x37\x6d\xec\x7b\xc1\x7a\xd1\xf9\x55\xe0\x02\x5b\x26\x29\x99\x04\xaf\x50\x1d\x09\xe6\x4e\x73\xd0\x59\x98\x96\xb8\xea\x62\x46\xe2\x9a\x8c\xb7\xea\x36\x5e\x8d\x29\x8f\xc3\xb0\xe0\xae\x67\x54\x8a\xd4\x44\xc4\x6c\x00\x89\xe9\xce\x10\x99\x35\x6c\x0b\x47\x47\x67\xa1\x15\x1d\x17\xb0\x2e\x46\xfe\x72\x99\xfb\x67\x08\x49\x04\xf6\xbc\xbb\x1e\x64\x70\x3e\x0a\x1f\x8d\xd8\xe4\xe1\xf7\x41\x47\x95\x6a\x3c\xe8\xa3\x6a\x32\x4d\x33\xdb\x69\x4c\x5d\x5f\x14\xa3\x63\x12\xb9\xc9\xc1\xcc\x28\xb4\xf9\x0c\x9c\x0b\xa9\xb5\x35\x0c\x4f\x75\x3e\x1e\x9f\x11\x55\x2a\xee\x3a\xf2\x18\xc1\x76\x76\xdd\x07\xa8\x1a\xbe\x10\x8c\x3e\x23\xa6\x37\x53\x31\x4d\x2f\xe6\x16\xa6\xa5\x21\xea\x37\x5f\x00\xf4\x9c\xe5\x73\x0e\x54\xbc\xe7\x09\x53\x40\xbc\x26\x99\x87\x05\x66\x54\x47\x4d\xbc\x0e\x76\xac\x72\x98\x9b\xf0\x88\x87\xdd\x23\xcb\x4f\xe9\x63\x8c\x18\x27\x3b\x1a\x63\xed\x7c\xf0\xf7\xfd\xb8\x8d\xf7\x4b\x98\xda\xb0\xae\xa3\x73\xe7\x66\xf0\x53\x23\x6c\x05\xc7\xb3\x34\x09\x83\xaf\x34\xf2\x95\xb3\xe7\x8a\xa8\xba\x58\x2d\xa2\x4a\x75\xa1\x30\x69\x55\xfe\xaf\x95\x87\x9b\x4c\xad\x1c\x6e\x3c\xb9\x9a\xdc\x66\x86\x1b\x90\x53\xa9\xf7\xef\x3c\x3e\xba\xf3\xbb\xde\x47\x5f\x76\xb7\xff\xd9\xdb\xef\xf4\xef\xed\x1d\xdd\xfd\xcf\xd1\x5f\xff\x51\x2b\x3b\x95\x7a\x6e\xb8\x4f\xb9\x26\x45\xd8\x36\xd4\x08\x3a\xb5\x5e\x2b\xcb\x99\x91\x94\x6c\x16\x16\x31\x3d\xcf\x50\x03\x66\xab\xc7\x3b\x5b\xcd\x59\xa8\x57\x34\x14\xae\xa5\xa3\x5a\xd9\x59\x98\x98\x0c\x2a\x32\xd4\x54\x02\x8f\x95\x7a\xc4\x63\x69\x39\x3a\x12\x8c\x06\x2d\xa6\xee\x73\xa2\xd7\xca\xe1\x7d\x52\x66\xcc\x3e\x6a\xb6\xc0\x50\x7c\x4e\x94\x7a\xad\x3c\x1a\x8d\x2d\x53\x4e\xac\x33\x75\xe5\x16\x08\x87\xd9\x53\x16\x0f\xda\xc1\x70\xe5\x50\x58\x91\x3d\xd0\x6c\x10\xb0\xd1\xaa\x49\x7c\x30\x94\xcb\x97\xae\x2c\x2b\xa8\xfc\x62\x48\x6c\x53\x98\xb3\x07\x41\x4a\x2b\x88\xb3\x35\xcf\x58\xac\xe7\xc2\xe2\x52\x7c\x0f\xb8\x9c\x56\x74\xa4\xd8\xd0\x62\xf2\xb3\x12\xb6\x32\xc5\x35\x3d\x6f\x8d\x71\x7b\x34\xf7\x8e\x07\xbc\x52\x5d\x28\x2a\xb9\xf6\xb7\x15\xcb\x6c\xf0\xc3\x4e\x25\x36\x5c\x30\x14\xcf\x6f\xb4\xb0\x50\xea\xbd\xed\x3f\x1f\xee\xdd\xab\x95\xc3\xc9\xd4\xa5\xa3\x63\x0e\x97\x31\x9e\x1d\x8f\x2c\x70\xdf\x9b\x31\xb7\xa1\x70\x32\xb7\x2f\x9c\x57\x0e\x9e\xcb\xa8\x07\xb3\xe7\x76\xa4\x31\xcc\xef\xd9\x31\xa6\x59\xab\xbe\x56\x0e\x36\xfe\x5c\x3c\x92\x27\xb1\xbb\xaa\xa1\xfe\xe3\x7f\xf5\xf7\xbe\xd2\xa7\x90\x9b\x03\x85\xb5\xd7\x89\xdc\xef\x7c\x87\xdc\x5e\x18\x73\x9b\x43\x93\x83\xe7\xbc\x27\xd8\x0d\xa0\x92\xc4\x4a\xae\x1d\xc3\xf4\x6a\xb2\x78\xc4\x06\xf4\x8a\xd0\x79\xf1\xff\x46\xe7\x05\x0d\xf5\xfe\xbd\x73\xd4\xd9\x9a\x46\x67\xc2\x56\x98\x2f\x5e\x23\x3e\x5f\x58\xba\xb8\xb4\xbc\xf4\xc2\x75\x70\x4a\x93\x97\x81\x26\xc3\xa3\xaf\xc5\xb1\x2b\x8e\x25\x09\x08\x64\xc3\x2a\xb6\x00\x19\x48\x5d\x83\x86\x1a\x99\xf2\x39\xf1\x90\x81\x6c\x66\xf9\x2d\xa0\x42\xfb\xa5\x0f\x7c\xe3\x0a\x10\xb0\x04\xe3\xe7\x09\xc9\xab\x23\x3c\x57\x03\xe8\x3e\x27\xd7\xd4\xc2\xd8\x84\x54\xbf\x3a\x7f\x4d\x0b\x42\x89\x0c\x74\xfd\xcc\x26\x61\x96\x29\x1f\x6e\x34\x87\x43\xb3\xfd\x43\x97\xb3\x55\x6c\x03\x37\x46\x87\xb2\x37\x38\xb4\xa0\xd5\x00\x6e\x54\xde\x08\x81\x19\x67\x36\xc3\x9b\xf6\xf5\xa8\xe1\xca\xb1\xe1\x88\xd5\xa8\x54\x75\xda\xf2\xc9\x15\x22\xcf\x95\x27\xf8\x2e\x45\x26\xbc\x5d\x35\x39\x0a\x9f\x70\x8c\x50\xfb\xea\xfc\xb5\xc8\x64\x70\x5e\x18\x4f\x56\xae\xc5\x35\x99\x2f\xc6\xb3\xd5\xe3\xd9\xc0\xa6\x66\xda\xf6\xd2\x2a\x50\x71\x11\x7b\x02\x28\xf0\xfc\x88\x50\x45\xd4\xf4\xa9\x25\x9d\x42\x79\x28\xc4\x9e\xae\x40\x73\x39\x48\xb5\x0b\xd0\x34\x7d\x22\xf2\x85\x28\x91\x86\x49\x46\x06\x12\x0e\xf6\xa2\x3e\xa6\x27\x37\x8c\x66\xc2\x48\xd8\x63\x32\xec\x04\x3c\x0b\x8d\x84\x72\xd9\x76\xe4\x8e\x8f\x0c\xf4\xe3\x2b\x97\x7e\xaa\xb9\x26\xf7\x20\x7f\x32\x30\xa9\x33\xb6\x58\x48\x98\x0c\x99\x7d\x32\xb4\x50\x6e\xb2\x7e\x47\x16\xc6\x1d\x65\x96\x30\x8d\x84\xd3\x0d\x05\x47\x17\x64\x84\xb5\x30\x93\x5b\xd1\x84\x85\x20\xc7\x25\xad\x6a\x9a\xa6\x46\x5f\x06\x0c\x97\x8f\x89\x44\x64\x9a\x20\x2c\x27\xef\x73\x52\x8c\x95\x8b\xbc\xc2\x0c\x15\x13\xe3\x16\x07\x1b\xa8\xc0\x26\xf1\x74\xa4\x60\x6a\x11\xdf\x06\x25\x29\x27\x9f\xcb\x81\x7b\x7a\x8a\x69\x79\xa9\xe7\x2d\x0b\x5c\xa1\xea\x48\x35\x5d\x97\xe0\x90\x8f\xe5\x5f\x78\x8c\xaa\x49\x63\x81\xc6\x5b\x8c\x0a\xa0\xa2\xb4\xbc\xe1\x42\xaa\x5e\x42\xad\x9d\xb4\xd4\x60\xf6\x86\x1e\xd6\x95\x27\x38\xa6\x2b\xb8\xb9\x91\x97\x21\x2e\x44\x65\xdb\x85\x84\xaa\x26\x1c\xa0\x79\x8e\x8c\x7a\x86\x4f\x16\xa3\x1e\x23\xc1\xfb\x8d\x3c\x4f\xea\xa3\x64\xde\xae\x9f\xd9\xe4\x5a\x38\xd6\xd6\xd1\xf1\x87\x65\x58\x17\x13\x7d\x6e\xf2\xe2\x20\x7c\x4e\x11\x4f\x3a\x3b\x15\x31\xd7\x64\x55\xe5\x0b\xcf\xe1\x96\xe0\xf1\xf7\xf7\x11\x3c\x51\x9a\x66\xf8\x8d\xd2\x4a\x32\x96\x05\x5e\x44\xd4\x27\xa4\x88\xaa\xd3\x6c\x64\x78\x1f\x44\x00\x59\xa6\xb0\x9c\x94\xfe\x37\x15\x46\xba\xb1\xc0\x73\x87\xb3\x35\x04\xe9\x8b\x3d\x63\x02\xd2\x01\x0d\x3b\xc1\x71\x41\x6c\xbe\x4b\xd3\x9e\x6d\x64\x69\x44\x06\xdb\xca\xbb\x34\xa5\x42\x32\x31\xe4\x0b\x12\x44\xc0\xf8\xcb\x9c\x35\x31\x01\x59\x0b\x63\xe1\x76\x11\x35\x4d\xe2\xc1\xc4\x50\xd8\x9a\x4e\xf7\x9b\x97\x70\xbf\x39\xdd\x2a\x4e\xb7\x8a\xd3\xad\xe2\xe5\xd8\x2a\xda\x13\x74\x0d\x0f\xff\xaf\x4b\xcf\x3d\x6d\x90\x2f\x55\x83\x3c\xed\x79\xa7\x3d\x2f\xe6\xf9\xb7\x73\x3c\x4e\x3f\x9a\x4e\xa8\x8d\xef\xcb\x65\xd4\xdd\xbe\xdf\xfb\x74\xf7\xf0\xe1\xd6\xe1\xc3\xfb\xbd\xdd\xce\xe0\xc9\xaf\xfb\x0f\xb6\xba\x37\x3f\xe9\x7f\xf6\x9b\xde\xed\x47\xdd\xfd\xed\xde\xa7\x4f\xfa\xf7\xf6\xba\x07\xb7\x7a\x5f\xfc\xbd\xdf\xd9\xe9\xfd\xfe\xeb\xc3\xa7\x77\x7b\x1f\xec\x46\x8c\xec\x75\xfa\x9d\x9d\xee\xfe\x56\x77\xfb\xe3\xc3\x87\x37\xbb\x7b\x9d\xc1\xee\x97\x87\x07\x4f\xfb\x9d\x9d\xc1\xd3\x3b\xd2\x72\xf0\xc5\xf1\xa4\xca\x60\xeb\xc3\xa1\xd8\xc3\x5b\x47\x7f\xd9\x19\x3c\x78\x32\x78\x70\x77\xf0\xb4\xd3\xfd\xfc\x6f\x93\xab\x48\x18\x81\xee\x37\xfb\x1f\x76\xbf\xfa\x55\xbf\xb3\xf3\x36\x37\x5d\xe7\x67\x17\x8f\x5f\x28\x8d\x3a\x78\xd4\xe1\x58\x46\x64\x77\x3b\x63\xb3\x56\xe6\x9b\xa7\xbc\x1a\xfd\x52\x3d\xd6\x1d\xc3\x76\x94\x7c\xd3\xd5\x62\x76\x78\x70\xbd\x9e\xdd\xa7\x74\xa4\xbe\xbd\xb4\x9c\xd2\x39\x5e\xd5\x76\xc5\x35\x69\xe3\xb9\xc8\x8f\x9b\x48\x4e\x1b\x46\xc0\xcd\x69\xbc\x92\xd9\xd4\x30\xa5\xc0\x7f\xb4\xfc\x93\x8b\xb2\xb9\xe5\xbb\x07\xb7\xba\x7f\xb8\xd9\xfb\xe2\x7e\xff\xce\xe3\xee\xc1\x27\x85\xf4\x8e\x36\x56\xf6\x40\x9c\x17\x82\xe3\x86\x2f\x20\xaf\x06\xdf\x56\xa8\x45\xa4\x86\x87\x06\x35\xbd\x29\xb4\x11\x10\x2f\xfe\xcb\x92\x99\x60\x85\x98\xd0\x9c\xec\xba\xd8\x6e\x07\xdd\x57\xee\xa3\xed\xe7\x87\x89\x69\x16\xca\xa9\x07\xa4\x08\xff\x07\x1f\x7d\xdd\xdd\xbe\x3d\x09\xb1\xff\xc7\xff\xf6\xb6\x3e\xf8\x66\xff\xb3\x63\x8a\x45\x98\x15\x0c\xd7\xca\xa3\x57\xde\xb9\x5a\x39\xfc\xa9\x48\xae\x56\x0e\x7e\xbc\xf8\xbf\x00\x00\x00\xff\xff\x58\x24\x85\x9e\xcc\x28\x00\x00")

func password_loginHtmlBytes() ([]byte, error) {
	return bindataRead(
		_password_loginHtml,
		"password_login.html",
	)
}

func password_loginHtml() (*asset, error) {
	bytes, err := password_loginHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "password_login.html", size: 10444, mode: os.FileMode(0644), modTime: time.Unix(1564732459, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x64, 0xd6, 0x48, 0xce, 0x71, 0xbc, 0x4d, 0x65, 0x2c, 0xc1, 0xa1, 0xba, 0x56, 0xc9, 0x7b, 0xbd, 0xe2, 0x9, 0x80, 0x6c, 0x8b, 0xdd, 0x57, 0x6d, 0x91, 0xf4, 0x13, 0xda, 0x3b, 0xae, 0xb0, 0x49}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"password_login.html": password_loginHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"password_login.html": &bintree{password_loginHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
