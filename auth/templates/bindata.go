// Code generated by go-bindata. DO NOT EDIT.
// sources:
// password_login.html (10.426kB)

package templates

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _password_loginHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x5b\x6f\x1b\xc7\x15\x7e\xe7\xaf\x98\xae\x8c\x2c\x09\x90\x4b\x91\xb2\x8a\x78\xcb\x65\x61\xc4\x42\x8a\xc2\xad\x5d\x58\x79\x28\x1c\x23\x5e\xee\x1e\x6a\xa7\x1e\xce\x6c\x67\x67\x75\x89\x40\x40\xe9\x0d\xbd\xc4\x51\x03\x33\x6e\x9c\xa4\x2d\xdc\x3a\x81\x60\xa0\xd6\x43\xd1\xc6\x96\x25\xfb\xcf\x88\x17\x3d\xe5\x2f\x14\xb3\x4b\x52\xdc\x1b\x45\xdb\x41\x6b\xd7\x5a\x01\xc2\x72\xe6\x9c\x33\xdf\xb9\x7c\x67\x66\x97\xac\x7d\xe7\xc2\xa5\xb7\x96\x7f\x7a\x79\x09\x39\xa2\x45\xea\xb9\x5c\xcd\x01\xd3\xae\xe7\x10\x42\xa8\xe6\x89\x0d\x02\xe1\xbd\xbc\x1a\xcc\xde\x40\x9b\xe3\x8f\xc1\x90\x69\xdd\x58\xe1\xcc\xa7\xb6\x8e\xe6\x00\xe0\x7b\x91\xd9\x26\xa3\xa2\xd4\x34\x5b\x98\x6c\xe8\x48\x1d\xfc\xe1\x51\xef\xf6\x23\xb5\x88\xd4\xee\x93\x07\x83\x83\xdd\xa3\xcf\x7f\x7d\xf4\xf8\x63\x35\xaa\xe2\x9a\xb6\x8d\xe9\x8a\x8e\x2a\xf3\xee\x7a\x74\xaa\x65\xf2\x15\x4c\x75\x34\x7f\x3c\xdc\xce\x8d\x6f\x9d\x4a\x0c\x5a\x28\x5e\x22\xd0\x14\x71\x6b\x93\x6a\x3c\x55\x4d\x47\xd5\x45\x77\x1d\x95\x82\xff\xe1\x6d\x12\x50\x83\x71\x1b\xb8\x8e\x28\xa3\x31\xc7\x1d\xc0\x2b\x8e\x5c\x36\xa1\x32\x8e\x57\xc9\x62\x84\x71\x1d\xcd\xd9\xb6\x9d\x8a\x4c\x6b\x10\x66\xdd\xc8\x40\x97\x04\x33\x0e\xdc\x18\x71\x25\xf8\x97\x10\xb4\xb1\xe7\x12\x73\x43\x47\x98\x12\x4c\xa1\x14\x2c\x93\x85\x52\x47\x73\xcd\x66\x33\xcd\xed\x12\x37\x6d\xec\x7b\xc1\x7a\xd1\xf9\x55\xe0\x02\x5b\x26\x29\x99\x04\xaf\x50\x1d\x09\xe6\x4e\x73\xd0\x59\x98\x96\xb8\xea\x62\x46\xe2\x9a\x8c\xb7\xea\x36\x5e\x8d\x29\x8f\xc3\xb0\xe0\xae\x67\x54\x8a\xd4\x44\xc4\x6c\x00\x89\xe9\xce\x10\x99\x35\x6c\x0b\x47\x47\x67\xa1\x15\x1d\x17\xb0\x2e\x46\xfe\x72\x99\xfb\x67\x08\x49\x04\xf6\xbc\xbb\x1e\x64\x70\x3e\x0a\x1f\x8d\xd8\xe4\xe1\xf7\x41\x47\x95\x6a\x3c\xe8\xa3\x6a\x32\x4d\x33\xdb\x69\x4c\x5d\x5f\x14\xa3\x63\x12\xb9\xc9\xc1\xcc\x28\xb4\xf9\x0c\x9c\x0b\xa9\xb5\x35\x0c\x4f\x75\x3e\x1e\x9f\x11\x55\x2a\xee\x3a\xf2\x18\xc1\x76\x76\xdd\x07\xa8\x1a\xbe\x10\x8c\x3e\x23\xa6\x37\x53\x31\x4d\x2f\xe6\x16\xa6\xa5\x21\xea\x37\x5f\x00\xf4\x9c\xe5\x73\x0e\x54\xbc\xe7\x09\x53\x40\xbc\x26\x99\x87\x05\x66\x54\x47\x4d\xbc\x0e\x76\xac\x72\x98\x9b\xf0\x88\x87\xdd\x23\xcb\x4f\xe9\x63\x8c\x18\x27\x3b\x1a\x63\xed\x7c\xf0\xf7\xdd\xb8\x8d\xf7\x4b\x98\xda\xb0\xae\xa3\x73\xe7\x66\xf0\x53\x23\x6c\x05\xc7\xb3\x34\x09\x83\xaf\x34\xf2\x95\xb3\xe7\x8a\xa8\xba\x58\x2d\xa2\x4a\x75\xa1\x30\x69\x55\xfe\xaf\x95\x87\x9b\x4c\xad\x1c\x6e\x3c\xb9\x9a\xdc\x66\x86\x1b\x90\x53\xa9\xf7\xef\x3c\x3e\xba\xf3\x9b\xde\x47\x5f\x76\xb7\xff\xde\xdb\xef\xf4\xef\xed\x1d\xdd\xfd\xd7\xd1\x9f\xff\x56\x2b\x3b\x95\x7a\x6e\xb8\x4f\xb9\x26\x45\xd8\x36\xd4\x08\x3a\xb5\x5e\x2b\xcb\x99\x91\x94\x6c\x16\x16\x31\x3d\xcf\x50\x03\x66\xab\xc7\x3b\x5b\xcd\x59\xa8\x57\x34\x14\xae\xa5\xa3\x5a\xd9\x59\x98\x98\x0c\x2a\x32\xd4\x54\x02\x8f\x95\x7a\xc4\x63\x69\x39\x3a\x12\x8c\x06\x2d\xa6\xee\x73\xa2\xd7\xca\xe1\x7d\x52\x66\xcc\x3e\x6a\xb6\xc0\x50\x7c\x4e\x94\x7a\xad\x3c\x1a\x8d\x2d\x53\x4e\xac\x33\x75\xe5\x16\x08\x87\xd9\x53\x16\x0f\xda\xc1\x70\xe5\x50\x58\x91\x3d\xd0\x6c\x10\xb0\xd1\xaa\x49\x7c\x30\x94\xcb\x97\xae\x2c\x2b\xa8\xfc\x62\x48\x6c\x53\x98\xb3\x07\x41\x4a\x2b\x88\xb3\x35\xcf\x58\xac\xe7\xc2\xe2\x52\x7c\x0f\xb8\x9c\x56\x74\xa4\xd8\xd0\x62\xf2\xb3\x12\xb6\x32\xc5\x35\x3d\x6f\x8d\x71\x7b\x34\xf7\x8e\x07\xbc\x52\x5d\x28\x2a\xb9\xf6\xb7\x15\xcb\x6c\xf0\xc3\x4e\x25\x36\x5c\x30\x14\xcf\x6f\xb4\xb0\x50\xea\xbd\xed\x3f\x1e\xee\xdd\xab\x95\xc3\xc9\xd4\xa5\xa3\x63\x0e\x97\x31\x9e\x1d\x8f\x2c\x70\xdf\x9b\x31\xb7\xa1\x70\x32\xb7\x2f\x9c\x57\x0e\x9e\xcb\xa8\x07\xb3\xe7\x76\xa4\x31\xcc\xef\xd9\x31\xa6\x59\xab\xbe\x56\x0e\x36\xfe\x5c\x3c\x92\x27\xb1\xbb\xaa\xa1\xfe\xe3\x7f\xf4\xf7\xbe\xd2\xa7\x90\x9b\x03\x85\xb5\xd7\x89\xdc\xef\xfc\x0f\xb9\xbd\x30\xe6\x36\x87\x26\x07\xcf\x79\x4f\xb0\x1b\x40\x25\x89\x95\x5c\x3b\x86\xe9\x94\xc5\x2f\x31\x8b\x17\xff\x6b\x2c\x5e\xd0\x50\xef\x9f\x3b\x47\x9d\xad\x69\x2c\x26\x6c\x85\xf9\xe2\x35\xa2\xf1\x85\xa5\x8b\x4b\xcb\x4b\x2f\x5c\x07\xa7\xec\x48\x43\xf1\x92\xb0\x63\x78\xd0\xb5\x38\x76\xc5\xb1\x24\x01\x81\x6c\x58\xc5\x16\x20\x03\xa9\x6b\xd0\x50\x23\x53\x3e\x27\x1e\x32\x90\xcd\x2c\xbf\x05\x54\x68\x3f\xf7\x81\x6f\x5c\x01\x02\x96\x60\xfc\x3c\x21\x79\x75\x84\xe7\x6a\x00\xdd\xe7\xe4\x9a\x5a\x18\x9b\x90\xea\x57\xe7\xaf\x69\x41\x28\x91\x81\xae\x9f\xd9\x24\xcc\x32\xe5\xa3\x8c\xe6\x70\x68\xb6\xbf\xef\x72\xb6\x8a\x6d\xe0\xc6\xe8\x08\xf6\x06\x87\x16\xb4\x1a\xc0\x8d\xca\x1b\x21\x30\xe3\xcc\x66\x78\xd3\xbe\x1e\x35\x5c\x39\x36\x1c\xb1\x1a\x95\xaa\x4e\x5b\x3e\xb9\x42\xe4\x29\xf2\x04\xdf\xa5\xc8\x84\xb7\xab\x26\x47\xe1\xf3\x8c\x11\x6a\x5f\x9d\xbf\x16\x99\x0c\x4e\x07\xe3\xc9\xca\xb5\xb8\x26\xf3\xc5\x78\xb6\x7a\x3c\x1b\xd8\xd4\x4c\xdb\x5e\x5a\x05\x2a\x2e\x62\x4f\x00\x05\x9e\x1f\xf1\xa8\x88\x9a\x3e\xb5\xa4\x53\x28\x0f\x85\xd8\xb3\x14\x68\x2e\x07\xa9\x76\x01\x9a\xa6\x4f\x44\xbe\x10\xe5\xcf\x30\xc9\xc8\x40\xc2\xc1\x5e\xd4\xc7\xf4\xe4\x86\xd1\x4c\x18\x09\x5b\x4b\x86\x9d\x80\x67\xa1\x91\x50\x2e\xdb\x8e\xdc\xdf\x91\x81\x7e\x78\xe5\xd2\x8f\x35\xd7\xe4\x1e\xe4\x4f\x06\x26\x75\xc6\x16\x0b\x09\x93\x21\xb3\x4f\x86\x16\xca\x4d\xd6\xef\xc8\xc2\x88\x90\x33\x85\x69\x24\x9c\x6e\x28\x38\xa8\x20\x23\xac\x85\x99\xdc\x8a\x26\x2c\x04\x39\x2e\x69\x55\xd3\x34\x35\xfa\xe8\x3f\x5c\x3e\x26\x12\x91\x69\x82\xb0\x9c\xbc\xcf\x49\x31\x56\x2e\xf2\x0a\x33\x54\x4c\x8c\x5b\x1c\x6c\xa0\x02\x9b\xc4\xd3\x91\x82\xa9\x45\x7c\x1b\x94\xa4\x9c\x7c\x0a\x07\xee\xe9\x29\xa6\xe5\xa5\x9e\xb7\x2c\x70\x85\xaa\x23\xd5\x74\x5d\x82\x43\x3e\x96\x7f\xe6\x31\xaa\x26\x8d\x05\x1a\x6f\x31\x2a\x80\x8a\xd2\xf2\x86\x0b\xa9\x7a\x09\xb5\x76\xd2\x52\x83\xd9\x1b\x7a\x58\x57\x9e\xe0\x98\xae\xe0\xe6\x46\x5e\x86\xb8\x10\x95\x6d\x17\x12\xaa\x9a\x70\x80\xe6\x39\x32\xea\x19\x3e\x59\x8c\x7a\x8c\x04\x6f\x33\xf2\x3c\xa9\x8f\x92\x79\xbb\x7e\x66\x93\x6b\xe1\x58\x5b\x47\xc7\x1f\x96\x61\x5d\x4c\xf4\xb9\xc9\x8b\x83\xf0\x39\x45\x3c\xe9\xec\x54\xc4\x5c\x93\x55\x95\x2f\x3c\x87\x5b\x82\xc7\xdf\xd6\x47\xf0\x44\x69\x9a\xe1\x37\x4a\x2b\xc9\x58\x16\x78\x11\x51\x9f\x90\x22\xaa\x4e\xb3\x91\xe1\x7d\x10\x01\x64\x99\xc2\x72\x52\xfa\xdf\x54\x18\xe9\xc6\x02\xcf\x1d\xce\xd6\x10\xa4\x2f\xf6\x8c\x09\x48\x07\x34\xec\x04\xc7\x05\xb1\xf9\x2e\x4d\x7b\x92\x91\xa5\x11\x19\x6c\x2b\xef\xd2\x94\x0a\xc9\xc4\x90\x2f\x48\x10\x01\xe3\x2f\x73\xd6\xc4\x04\x64\x2d\x8c\x85\xdb\x45\xd4\x34\x89\x07\x13\x43\x61\x6b\x3a\xdd\x6f\x5e\xc1\xfd\xe6\x74\xab\x38\xdd\x2a\x4e\xb7\x8a\x57\x63\xab\x68\x4f\xd0\x35\x3c\xfc\xbf\x2e\x3d\xf7\xb4\x41\xbe\x52\x0d\xf2\xb4\xe7\x9d\xf6\xbc\x98\xe7\xdf\xce\xf1\x38\xfd\x68\x3a\xa1\x36\xbe\x2f\x97\x51\x77\xfb\x7e\xef\xd3\xdd\xc3\x87\x5b\x87\x0f\xef\xf7\x76\x3b\x83\x27\xbf\xec\x3f\xd8\xea\xde\xfc\xa4\xff\xd9\xaf\x7a\xb7\x1f\x75\xf7\xb7\x7b\x9f\x3e\xe9\xdf\xdb\xeb\x1e\xdc\xea\x7d\xf1\xd7\x7e\x67\xa7\xf7\xdb\xaf\x0f\x9f\xde\xed\x7d\xb0\x1b\x31\xb2\xd7\xe9\x77\x76\xba\xfb\x5b\xdd\xed\x8f\x0f\x1f\xde\xec\xee\x75\x06\xbb\x5f\x1e\x1e\x3c\xed\x77\x76\x06\x4f\xef\x48\xcb\xc1\xd7\xc4\x93\x2a\x83\xad\x0f\x87\x62\x0f\x6f\x1d\xfd\x69\x67\xf0\xe0\xc9\xe0\xc1\xdd\xc1\xd3\x4e\xf7\xf3\xbf\x4c\xae\x22\x61\x04\xba\xdf\xec\x7f\xd8\xfd\xea\x17\xfd\xce\xce\xdb\xdc\x74\x9d\x9f\x5c\x3c\x7e\xa1\x34\xea\xe0\x51\x87\x63\x19\x91\xdd\xed\x8c\xcd\x5a\x99\x6f\x9e\xf2\x6a\xf4\x2b\xf4\x58\x77\x0c\xdb\x51\xf2\x4d\x57\x8b\xd9\xe1\xc1\xf5\x7a\x76\x9f\xd2\x91\xfa\xf6\xd2\x72\x4a\xe7\xf8\x7f\x6d\x57\x5c\x93\x36\x9e\x8b\xfc\xb8\x89\xe4\xb4\x61\x04\xdc\x9c\xc6\x2b\x99\x4d\x0d\x53\x0a\xfc\x07\xcb\x3f\xba\x28\x9b\x5b\xbe\x7b\x70\xab\xfb\xbb\x9b\xbd\x2f\xee\xf7\xef\x3c\xee\x1e\x7c\x52\x48\xef\x68\x63\x65\x0f\xc4\x79\x21\x38\x6e\xf8\x02\xf2\x6a\xf0\x25\x85\x5a\x44\x6a\x78\x68\x50\xd3\x9b\x42\x1b\x01\xf1\xe2\xbf\x23\x99\x09\x56\x88\x09\xcd\xc9\xae\x8b\xed\x76\xd0\x7d\xe5\x3e\xda\x7e\x7e\x98\x98\x66\xa1\x9c\x7a\x40\x8a\xf0\x7f\xf0\xd1\xd7\xdd\xed\xdb\x93\x10\xfb\xbf\xff\x77\x6f\xeb\x83\x6f\xf6\x3f\x3b\xa6\x58\x84\x59\xc1\x70\xad\x3c\x7a\xe5\x9d\xab\x95\xc3\x1f\x86\xe4\x6a\xe5\xe0\xa7\x8a\xff\x09\x00\x00\xff\xff\xbc\x97\x3a\x4f\xba\x28\x00\x00")

func password_loginHtmlBytes() ([]byte, error) {
	return bindataRead(
		_password_loginHtml,
		"password_login.html",
	)
}

func password_loginHtml() (*asset, error) {
	bytes, err := password_loginHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "password_login.html", size: 10426, mode: os.FileMode(0644), modTime: time.Unix(1564732832, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc1, 0x9d, 0x59, 0xec, 0x8, 0x28, 0x2b, 0x58, 0x16, 0xda, 0x17, 0x9d, 0x95, 0xc1, 0x5f, 0xdc, 0x72, 0x80, 0x4d, 0x3e, 0x7, 0x8d, 0x16, 0x9, 0xcc, 0xcb, 0xdc, 0x31, 0xb3, 0x99, 0xf7, 0x68}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"password_login.html": password_loginHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"password_login.html": &bintree{password_loginHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
